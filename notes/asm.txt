1.各种寄存器
AX--accumulator, 累加寄存器
CS--counter，计数寄存器
DX--data，数据寄存器
BX--base，基址寄存器
SP--stack pointer，栈指针寄存器
BP——base pointer，基址指针寄存器
SI--source index，源变址寄存器
DI——destination index，目的变址寄存器


ES——附加段寄存器(extra segment)
CS——代码段寄存器(code segment)
SS——栈段寄存器(stack segment)
DS——数据段寄存器(data segment)
FS——没有名称（segment part 2）
GS——没有名称（segment part 3）

2.寄存器限制
只有BX、BP、SI、DI几个寄存器，可以用寄存器指定内存地址，剩下的AX、CX、DX、SP不可以。

3.操作系统对内存的使用
--0地址：BOIS程序用来实现各种功能的地方。
--0x00000ff0: BOOTINFO
--0x00007c00~~0x00007dff:启动区内容的装载地址。(IPL)
--0x00008000:磁盘内容拷贝到内存的地址。
--0x0000c200:操作系统地址(OS)
--0x000a0000~~0x000affff:VRAM显卡内存地址
--其它：暂时没人用
--0x000f0000地址：存放这BIOS程序本身
--0x0026f800~0x0026ffff: IDT
--0x00270000~0x0027ffff: GDT
--0x00280000~0x002fffff: bootpack.hrb





4.BIOS中断和DOS中断的区别
bios是主板预装好的input、output系统，而dos是需要安装才能使用操作系统。用int条用中断以后可以通过不同的系统达到不同的目的和效果。其中int 1 -20 是bios中断，int21 专门用于dos中断。
只有16位汇编才能访问BIOS，32位汇编不能访问。

5.如果汇编和C语言联合使用的话，有的寄存器可以自由使用，有的寄存器不能自由使用，能自由使用的只有eax, ecx, edx,这三个。至于其它寄存器，智能使用其值，而不能改变其值。
因为这些寄存器在c语言编译后生成的机器语言中，用于记忆非常重要的值。

6.INSTRSET指令
[INSTRSET "i486p"]              ; 使用到486为止的指令
该指令用于指定32位汇编


7.GDT
GDT是“global segment descriptor table“的缩写，意思是全局短号记录表。大小64K（8192*8 = 64K）
将这些数据整齐地排列在内存的某个地方，然后将内存的起始地址和有效设定个数放在CPU内被称作GDTR的特殊寄存器中，设定就完成了。

8.IDT
IDT是“interrupt descriptor table”的缩写，直译过来就是“中断记录表”。当CPU遇到外部状况变化，或者是内部偶然发生某些错误时，会临时切花过去处理这种突发事件。这就是中断功能。

IDT记录了0~255的中断号码和调用函数的对应关系。

9.PIC
PIC:programmable interrupt controller.) 可编程中断控制器。
IMR: interrupt mask register, 中断屏蔽寄存器
ICW: initial control word. 初始化控制数据



