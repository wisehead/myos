!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADR_BOOTINFO	bootpack.h	/^#define ADR_BOOTINFO	/;"	d
ADR_BOTPAK	bootpack.h	/^#define ADR_BOTPAK	/;"	d
ADR_GDT	bootpack.h	/^#define ADR_GDT	/;"	d
ADR_IDT	bootpack.h	/^#define ADR_IDT	/;"	d
AR_CODE32_ER	bootpack.h	/^#define AR_CODE32_ER	/;"	d
AR_DATA32_RW	bootpack.h	/^#define AR_DATA32_RW	/;"	d
AR_INTGATE32	bootpack.h	/^#define AR_INTGATE32	/;"	d
BIM2HRB	Makefile	/^BIM2HRB  = $(TOOLPATH)bim2hrb.exe$/;"	m
BIN2OBJ	Makefile	/^BIN2OBJ  = $(TOOLPATH)bin2obj.exe$/;"	m
BOOTINFO	bootpack.h	/^struct BOOTINFO { \/* 0x0ff0-0x0fff *\/$/;"	s
CC1	Makefile	/^CC1      = $(TOOLPATH)cc1.exe -I$(INCPATH) -Os -Wall -quiet$/;"	m
COL8_000000	bootpack.h	/^#define COL8_000000	/;"	d
COL8_000084	bootpack.h	/^#define COL8_000084	/;"	d
COL8_0000FF	bootpack.h	/^#define COL8_0000FF	/;"	d
COL8_008400	bootpack.h	/^#define COL8_008400	/;"	d
COL8_008484	bootpack.h	/^#define COL8_008484	/;"	d
COL8_00FF00	bootpack.h	/^#define COL8_00FF00	/;"	d
COL8_00FFFF	bootpack.h	/^#define COL8_00FFFF	/;"	d
COL8_840000	bootpack.h	/^#define COL8_840000	/;"	d
COL8_840084	bootpack.h	/^#define COL8_840084	/;"	d
COL8_848400	bootpack.h	/^#define COL8_848400	/;"	d
COL8_848484	bootpack.h	/^#define COL8_848484	/;"	d
COL8_C6C6C6	bootpack.h	/^#define COL8_C6C6C6	/;"	d
COL8_FF0000	bootpack.h	/^#define COL8_FF0000	/;"	d
COL8_FF00FF	bootpack.h	/^#define COL8_FF00FF	/;"	d
COL8_FFFF00	bootpack.h	/^#define COL8_FFFF00	/;"	d
COL8_FFFFFF	bootpack.h	/^#define COL8_FFFFFF	/;"	d
COPY	Makefile	/^COPY     = copy$/;"	m
DEL	Makefile	/^DEL      = del$/;"	m
EDIMG	Makefile	/^EDIMG    = $(TOOLPATH)edimg.exe$/;"	m
FIFO8	bootpack.h	/^struct FIFO8 {$/;"	s
FLAGS_OVERRUN	fifo.c	/^#define FLAGS_OVERRUN	/;"	d	file:
GAS2NASK	Makefile	/^GAS2NASK = $(TOOLPATH)gas2nask.exe -a$/;"	m
GATE_DESCRIPTOR	bootpack.h	/^struct GATE_DESCRIPTOR {$/;"	s
HariMain	bootpack.c	/^void HariMain(void)$/;"	f
IMGTOL	Makefile	/^IMGTOL   = $(TOOLPATH)imgtol.com$/;"	m
INCPATH	Makefile	/^INCPATH  = ..\/z_tools\/haribote\/$/;"	m
KBC_MODE	bootpack.c	/^#define KBC_MODE /;"	d	file:
KEYCMD_SENDTO_MOUSE	bootpack.c	/^#define KEYCMD_SENDTO_MOUSE /;"	d	file:
KEYCMD_WRITE_MODE	bootpack.c	/^#define KEYCMD_WRITE_MODE /;"	d	file:
KEYSTA_SEND_NOTREADY	bootpack.c	/^#define KEYSTA_SEND_NOTREADY /;"	d	file:
LIMIT_BOTPAK	bootpack.h	/^#define LIMIT_BOTPAK	/;"	d
LIMIT_GDT	bootpack.h	/^#define LIMIT_GDT	/;"	d
LIMIT_IDT	bootpack.h	/^#define LIMIT_IDT	/;"	d
MAKE	Makefile	/^MAKE     = $(TOOLPATH)make.exe -r$/;"	m
MAKEFONT	Makefile	/^MAKEFONT = $(TOOLPATH)makefont.exe$/;"	m
MOUSECMD_ENABLE	bootpack.c	/^#define MOUSECMD_ENABLE /;"	d	file:
MOUSE_DEC	bootpack.c	/^struct MOUSE_DEC {$/;"	s	file:
NASK	Makefile	/^NASK     = $(TOOLPATH)nask.exe$/;"	m
OBJ2BIM	Makefile	/^OBJ2BIM  = $(TOOLPATH)obj2bim.exe$/;"	m
OBJS_BOOTPACK	Makefile	/^OBJS_BOOTPACK = bootpack.obj naskfunc.obj hankaku.obj graphic.obj dsctbl.obj \\$/;"	m
PIC0_ICW1	bootpack.h	/^#define PIC0_ICW1	/;"	d
PIC0_ICW2	bootpack.h	/^#define PIC0_ICW2	/;"	d
PIC0_ICW3	bootpack.h	/^#define PIC0_ICW3	/;"	d
PIC0_ICW4	bootpack.h	/^#define PIC0_ICW4	/;"	d
PIC0_IMR	bootpack.h	/^#define PIC0_IMR	/;"	d
PIC0_OCW2	bootpack.h	/^#define PIC0_OCW2	/;"	d
PIC1_ICW1	bootpack.h	/^#define PIC1_ICW1	/;"	d
PIC1_ICW2	bootpack.h	/^#define PIC1_ICW2	/;"	d
PIC1_ICW3	bootpack.h	/^#define PIC1_ICW3	/;"	d
PIC1_ICW4	bootpack.h	/^#define PIC1_ICW4	/;"	d
PIC1_IMR	bootpack.h	/^#define PIC1_IMR	/;"	d
PIC1_OCW2	bootpack.h	/^#define PIC1_OCW2	/;"	d
PORT_KEYCMD	bootpack.c	/^#define PORT_KEYCMD /;"	d	file:
PORT_KEYDAT	bootpack.c	/^#define PORT_KEYDAT /;"	d	file:
PORT_KEYDAT	int.c	/^#define PORT_KEYDAT	/;"	d	file:
PORT_KEYSTA	bootpack.c	/^#define PORT_KEYSTA /;"	d	file:
RULEFILE	Makefile	/^RULEFILE = $(TOOLPATH)haribote\/haribote.rul$/;"	m
SEGMENT_DESCRIPTOR	bootpack.h	/^struct SEGMENT_DESCRIPTOR {$/;"	s
TOOLPATH	Makefile	/^TOOLPATH = ..\/z_tools\/$/;"	m
access_right	bootpack.h	/^	char base_mid, access_right;$/;"	m	struct:SEGMENT_DESCRIPTOR
access_right	bootpack.h	/^	char dw_count, access_right;$/;"	m	struct:GATE_DESCRIPTOR
base_high	bootpack.h	/^	char limit_high, base_high;$/;"	m	struct:SEGMENT_DESCRIPTOR
base_low	bootpack.h	/^	short limit_low, base_low;$/;"	m	struct:SEGMENT_DESCRIPTOR
base_mid	bootpack.h	/^	char base_mid, access_right;$/;"	m	struct:SEGMENT_DESCRIPTOR
boxfill8	graphic.c	/^void boxfill8(unsigned char *vram, int xsize, unsigned char c, int x0, int y0, int x1, int y1)$/;"	f
btn	bootpack.c	/^	int x, y, btn;$/;"	m	struct:MOUSE_DEC	file:
buf	bootpack.c	/^	unsigned char buf[3], phase;$/;"	m	struct:MOUSE_DEC	file:
buf	bootpack.h	/^	unsigned char *buf;$/;"	m	struct:FIFO8
cyls	bootpack.h	/^	char cyls; \/* 启动区读磁盘读到此为止 *\/$/;"	m	struct:BOOTINFO
dw_count	bootpack.h	/^	char dw_count, access_right;$/;"	m	struct:GATE_DESCRIPTOR
enable_mouse	bootpack.c	/^void enable_mouse(struct MOUSE_DEC *mdec){$/;"	f
fifo8_get	fifo.c	/^int fifo8_get(struct FIFO8 *fifo)$/;"	f
fifo8_init	fifo.c	/^void fifo8_init(struct FIFO8 *fifo, int size, unsigned char *buf)$/;"	f
fifo8_put	fifo.c	/^int fifo8_put(struct FIFO8 *fifo, unsigned char data)$/;"	f
fifo8_status	fifo.c	/^int fifo8_status(struct FIFO8 *fifo)$/;"	f
flags	bootpack.h	/^	int p, q, size, free, flags;$/;"	m	struct:FIFO8
free	bootpack.h	/^	int p, q, size, free, flags;$/;"	m	struct:FIFO8
init_gdtidt	dsctbl.c	/^void init_gdtidt(void)$/;"	f
init_keyboard	bootpack.c	/^void init_keyboard(void)$/;"	f
init_mouse_cursor8	graphic.c	/^void init_mouse_cursor8(char *mouse, char bc)$/;"	f
init_palette	graphic.c	/^void init_palette(void)$/;"	f
init_pic	int.c	/^void init_pic(void)$/;"	f
init_screen8	graphic.c	/^void init_screen8(char *vram, int x, int y)$/;"	f
inthandler21	int.c	/^void inthandler21(int *esp)$/;"	f
inthandler27	int.c	/^void inthandler27(int *esp)$/;"	f
inthandler2c	int.c	/^void inthandler2c(int *esp)$/;"	f
keyfifo	int.c	/^struct FIFO8 keyfifo;$/;"	v	typeref:struct:FIFO8
leds	bootpack.h	/^	char leds; \/* 启动时键盘的LED的状态 *\/$/;"	m	struct:BOOTINFO
limit_high	bootpack.h	/^	char limit_high, base_high;$/;"	m	struct:SEGMENT_DESCRIPTOR
limit_low	bootpack.h	/^	short limit_low, base_low;$/;"	m	struct:SEGMENT_DESCRIPTOR
mouse_decode	bootpack.c	/^int mouse_decode(struct MOUSE_DEC *mdec, unsigned char dat){$/;"	f
mousefifo	int.c	/^struct FIFO8 mousefifo;$/;"	v	typeref:struct:FIFO8
offset_high	bootpack.h	/^	short offset_high;$/;"	m	struct:GATE_DESCRIPTOR
offset_low	bootpack.h	/^	short offset_low, selector;$/;"	m	struct:GATE_DESCRIPTOR
p	bootpack.h	/^	int p, q, size, free, flags;$/;"	m	struct:FIFO8
phase	bootpack.c	/^	unsigned char buf[3], phase;$/;"	m	struct:MOUSE_DEC	file:
putblock8_8	graphic.c	/^void putblock8_8(char *vram, int vxsize, int pxsize,$/;"	f
putfont8	graphic.c	/^void putfont8(char *vram, int xsize, int x, int y, char c, char *font)$/;"	f
putfonts8_asc	graphic.c	/^void putfonts8_asc(char *vram, int xsize, int x, int y, char c, unsigned char *s)$/;"	f
q	bootpack.h	/^	int p, q, size, free, flags;$/;"	m	struct:FIFO8
reserve	bootpack.h	/^	char reserve;$/;"	m	struct:BOOTINFO
scrnx	bootpack.h	/^	short scrnx, scrny; \/* 画面分辨率 *\/$/;"	m	struct:BOOTINFO
scrny	bootpack.h	/^	short scrnx, scrny; \/* 画面分辨率 *\/$/;"	m	struct:BOOTINFO
selector	bootpack.h	/^	short offset_low, selector;$/;"	m	struct:GATE_DESCRIPTOR
set_gatedesc	dsctbl.c	/^void set_gatedesc(struct GATE_DESCRIPTOR *gd, int offset, int selector, int ar)$/;"	f
set_palette	graphic.c	/^void set_palette(int start, int end, unsigned char *rgb)$/;"	f
set_segmdesc	dsctbl.c	/^void set_segmdesc(struct SEGMENT_DESCRIPTOR *sd, unsigned int limit, int base, int ar)$/;"	f
size	bootpack.h	/^	int p, q, size, free, flags;$/;"	m	struct:FIFO8
vmode	bootpack.h	/^	char vmode; \/* 显卡模式为多少位彩色 *\/$/;"	m	struct:BOOTINFO
vram	bootpack.h	/^	char *vram;$/;"	m	struct:BOOTINFO
wait_KBC_sendready	bootpack.c	/^void wait_KBC_sendready(void)$/;"	f
x	bootpack.c	/^	int x, y, btn;$/;"	m	struct:MOUSE_DEC	file:
y	bootpack.c	/^	int x, y, btn;$/;"	m	struct:MOUSE_DEC	file:
